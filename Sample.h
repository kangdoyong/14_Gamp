#pragma once
#include <iostream>
using namespace std;

class Sample
{
public:
	// 생성자(Constructor)
	// 객체 생성 시, 단 한 번만 객체를 생성하는 시점에
	// 필드를 원하는 값으로 초기화하고 사용할 수 있는 특별한 메서드

	// 생성자의 기본적인 언어적 규칙
	// 1. 생성자의 이름은 클래스명 일치
	// 2. 생성자 선언 시, 반환 형식을 작성x, 반환 값도 작성x
	// 3. 생성자 오버로딩 가능
	// 4. 생성자는 상속되지 않음
	// 5. 정적할당 시, 클래스명() 으로 생성자를 호출
	// 6. 동적할당 시, new 클래스명() 으로 생성자를 호출
	// 7. 생성자를 정의하지 않아도, 기본 생성자와 기본 복사 생성자가
	//    자동으로 추가

	// 기본 생성자
	// 클래스를 선언할 때, 명시적으로 생성자를 구현하지 않아도
	// 컴파일러에서 만들어주는 기본 형태 "클래스이름(파라미터 없음)" 의 생성자를 의미
	// 생성자를 하나라도 정의하게 된다면, 컴파일러는 기본 생성자를 제공하지 않습니다.
	Sample();

	// 소멸자 (Deconstructor, Finalizer)
	// 객체가 파괴될 때 호출
	// 오버로딩, 매개변수를 추가할 수 없습니다.
	// 생성자와 동일한 방식으로 선언되지만 앞에 ~가 붙습니다.
	// 정적할당된 객체일 경우, 선언된 코드블록을 벗어나면 호출
	// 동적할당된 객체일 경우, delete로 해제될 경우 호출
	// 필드 내 동적할당한 필드가 있다면 해제 용도로 사용
	~Sample();
};

