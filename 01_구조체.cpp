#include <iostream>
using namespace std;

// 구조체는 c언어보다 c++에서 더 많은 기능을 이용
// typedef 없어도 구조체 형식의 변수 선언 시,
// struct 키워드를 안 적어도 됨
// 멤버 변수에 대한 초기값을 지정
// 멤버 함수를 정의할 수 있음
// -> 더 편하게 객체의 형태를 표현할 수 있음

struct Point
{
	// 인스턴스 필드 선언
	// 인스턴스란? 어떠한 특정한 형태로 만들어진 결과물
	// 인스턴스 필드 : 해당 구조체 형식의 "객체(인스턴스)에 속하는 멤버 변수"를 의미
	double x = 0;
	double y = 0;

	// 인스턴스 메서드를 선언
	// 인스턴스 메서드 : 해당 구조체 형식의 "객체에 속하는 멤버 함수"를 의미
	void SetPoint(double x, double y)
	{
		// 파라미터의 이름과 필드의 이름이 동일
		// -> 파라미터가 우선 시 사용 (파라미터는 해당 함수의 지역변수와 동일)
		// 위와 같은 경우에 자신의 멤버를 가리키고 싶을 때
		// this 키워드를 사용
		// this : 해당 구조체 형식으로 생성된 객체 자기자신의 주소를 의미
		this->x = x;
		this->y = y;
	}

	// 정적 메서드(정적 멤버 함수)를 정의
	// 정적 메서드는 인스턴스에 포함되지 않으며, 구조체 자체에 포함됩니다.
	// 어떠한 인스턴스를 생성하지 않고도, 구조체 식별자만을 통해 함수를 호출할 수 있습니다.
	static void PrintPoint(Point point)
	{
		cout << "x = " << point.x << ", y = " << point.y << endl;
	}

	// 구조체 멤버에서의 static
	// 키워드 뒤에 오는 필드나 메서드를 인스턴스가 아닌
	// 구조체 자체에 소속시키도록 하는 한정자
	// 멤버 변수는 정적 필드가 되며, 메서드는 정적 메서드
};

void main()
{
	// C언어와 다르게 typedef 이 없어도
	// sturct 키워드 생략 가능
	Point a;

	// 기본적인 멤버 접근 방식은 c와 동일
	a.SetPoint(12.3, 43.2);

	// 구조체에 포함시킨 정적메서드를 이용하여 좌표를 출력
	// -> 정적 멤버 접근 방식 구조체명::정적멤버이름
	Point::PrintPoint(a);
}